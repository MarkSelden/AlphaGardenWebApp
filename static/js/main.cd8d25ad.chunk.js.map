{"version":3,"sources":["logo.svg","Components/Garden-Overview.bmp","Media/testSmall.mp4","Components/BackVideo.js","Components/TextOverlay.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BackVideo","autoPlay","muted","id","onEnded","this","props","endFunc","src","vidName","type","React","Component","TextOverLay","today","Date","className","require","alt","height","width","getDate","getMonth","App","state","page","setState","TextOverlay","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"kKAAAA,EAAOC,QAAU,IAA0B,kC,kCCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,uC,mHCgB5BC,G,6LAXZ,OAEA,2BAAOC,UAAQ,EAACC,OAAK,EAACC,GAAG,kBAAkBC,QAASC,KAAKC,MAAMC,SACzD,4BAAQC,IAAKH,KAAKC,MAAMG,QAASC,KAAK,mB,GANvBC,IAAMC,YCwBfC,EAvBM,SAACP,GAMrB,IAAIQ,EAAQ,IAAIC,KAIf,OACC,yBAAKC,UAAY,WAChB,yBAAKR,IAAKS,EAAQ,IAA0BC,IAAI,cAAcC,OAAO,OAAOC,MAAM,SAChF,yBAAKJ,UAAU,WAChB,kDACA,qCAAWF,EAAMO,UAAYP,EAAMQ,WAAnC,QCeUC,E,YAzBb,WAAYjB,GAAQ,IAAD,8BACjB,4CAAMA,KACDkB,MAAQ,CACXC,KAAM,kBAAC,EAAD,CACFhB,QAASQ,EAAQ,IACjBV,QAAS,WAAQ,EAAKmB,SAAS,CAC7BD,KAAM,kBAACE,EAAD,YANG,E,sEAejB,OAEE,6BAEGtB,KAAKmB,MAAMC,U,GApBFd,IAAMC,WCKJgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.cd8d25ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/Garden-Overview.2eca6955.bmp\";","module.exports = __webpack_public_path__ + \"static/media/testSmall.d55bddf8.mp4\";","import React from 'react';\n// Component that sets background video. Props: {videoName, endFunc}\nclass BackVideo extends React.Component{\n\n\trender(){\n\t  return (\n\t    \n\t\t <video autoPlay muted id=\"backgroundVideo\" onEnded={this.props.endFunc}>\n\t        <source src={this.props.vidName} type=\"video/mp4\" />\n\t     < /video>\n\n\t    \n\t  );\n\t}\n}\n\nexport default BackVideo;","import React from 'react';\n\n//component for the text that goes over the background video\n const TextOverLay = (props) => {\n\t//console.log(props.show)\n\t//if(!props.show){\n\t//\treturn null;\n\t//\n\n\tlet today = new Date();\n\t\n\n\n\t return (\n\t \t<div className = \"LOADING\">\n\t \t\t<img src={require(\"./Garden-Overview.bmp\")} alt=\"Zaaa GARDEN\" height=\"auto\" width=\"100%\" />\n\t    \t<div className=\"Overlay\">\n\t\t \t\t<p> LOADING GARDEN... </p>\n\t\t \t\t<h1> Day: {today.getDate() + today.getMonth()} </h1>\n\t\t \t</div>\n\t\t</div>\n\t\t)\n\n\t    \n}\n\nexport default TextOverLay;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport BackVideo from './Components/BackVideo.js'\nimport TextOverlay from './Components/TextOverlay.js'\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      page: <BackVideo \n          vidName={require(\"./Media/testSmall.mp4\")}\n          endFunc={() => { this.setState({\n            page: <TextOverlay />\n\n          })}}/>\n    };\n  }\n  \n\n  render(){\n\n    return (\n\n      <div>\n        \n        {this.state.page}\n      </div>\n      )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}